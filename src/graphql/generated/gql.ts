/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  mutation createFaqByAdmin($question: String!, $answer: String!, $faqCategoryId: Int!) {\n    createFaqByAdmin(question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n": types.CreateFaqByAdminDocument,
    "\n  mutation createNoticeByAdmin($title: String!, $noticeKind: NoticeKind!, $content: String!) {\n    createNoticeByAdmin(title: $title, noticeKind: $noticeKind, content: $content)\n  }\n": types.CreateNoticeByAdminDocument,
    "\n  mutation projectIsVisibleToggleByAdmin($id: Int!) {\n    projectIsVisibleToggleByAdmin(id: $id)\n  }\n": types.ProjectIsVisibleToggleByAdminDocument,
    "\n  mutation createPolicyByAdmin(\n    $title: String!\n    $content: String!\n    $isRequired: Boolean!\n    $policyCategoryIds: [Int!]!\n  ) {\n    createPolicyByAdmin(\n      title: $title\n      content: $content\n      isRequired: $isRequired\n      policyCategoryIds: $policyCategoryIds\n    )\n  }\n": types.CreatePolicyByAdminDocument,
    "\n  mutation createProjectByAdmin(\n    $name: String!\n    $zip: String!\n    $address: String!\n    $addressDetail: String!\n    $latitude: String!\n    $longitude: String!\n    $zoning: String!\n    $mainPurpose: String!\n    $grossFloorAreaMeter: String!\n    $grossFloorAreaPyeong: String!\n    $buildingCoverageRatio: String!\n    $floorAreaRatio: String!\n    $officialLandPrice: String!\n    $completionDate: Date!\n    $lessee: String\n    $leaseStartedAt: Date\n    $leaseEndedAt: Date\n    $url: String\n    $tabsName: String!\n    $totalPublicOfferingAmount: String!\n    $publicOfferingPrice: String!\n    $publicOfferingQuantity: Int!\n    $issuer: String!\n    $publicOfferingStartedAt: Date!\n    $publicOfferingEndedAt: Date!\n    $allocationDate: Date!\n    $receivingDate: Date!\n    $listedDate: Date!\n    $images: [ImageInCreateProjectByAdminArgs!]!\n    $docs: [DocInCreateProjectByAdminArgs!]!\n    $officialInfos: [OfficialInfoInCreateProjectByAdminArgs!]!\n  ) {\n    createProjectByAdmin(\n      name: $name\n      zip: $zip\n      address: $address\n      addressDetail: $addressDetail\n      latitude: $latitude\n      longitude: $longitude\n      zoning: $zoning\n      mainPurpose: $mainPurpose\n      grossFloorAreaMeter: $grossFloorAreaMeter\n      grossFloorAreaPyeong: $grossFloorAreaPyeong\n      buildingCoverageRatio: $buildingCoverageRatio\n      floorAreaRatio: $floorAreaRatio\n      officialLandPrice: $officialLandPrice\n      completionDate: $completionDate\n      lessee: $lessee\n      leaseStartedAt: $leaseStartedAt\n      leaseEndedAt: $leaseEndedAt\n      url: $url\n      tabsName: $tabsName\n      totalPublicOfferingAmount: $totalPublicOfferingAmount\n      publicOfferingPrice: $publicOfferingPrice\n      publicOfferingQuantity: $publicOfferingQuantity\n      issuer: $issuer\n      publicOfferingStartedAt: $publicOfferingStartedAt\n      publicOfferingEndedAt: $publicOfferingEndedAt\n      allocationDate: $allocationDate\n      receivingDate: $receivingDate\n      listedDate: $listedDate\n      images: $images\n      docs: $docs\n      officialInfos: $officialInfos\n    ) {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      createdAt\n    }\n  }\n": types.CreateProjectByAdminDocument,
    "\n  mutation createProjectDividendByAdmin(\n    $projectId: Int!\n    $name: String!\n    $closingDate: Date!\n    $operatingProfit: String\n  ) {\n    createProjectDividendByAdmin(\n      projectId: $projectId\n      name: $name\n      closingDate: $closingDate\n      operatingProfit: $operatingProfit\n    )\n  }\n": types.CreateProjectDividendByAdminDocument,
    "\n  mutation createProjectFileByAdmin(\n    $projectId: Int!\n    $fileKind: FileKind!\n    $file: Upload!\n    $name: String\n  ) {\n    createProjectFileByAdmin(projectId: $projectId, name: $name, fileKind: $fileKind, file: $file)\n  }\n": types.CreateProjectFileByAdminDocument,
    "\n  mutation createProjectSellVoteByAdmin(\n    $requestSellAmount: String!\n    $sellVoteStartedAt: Date!\n    $sellVoteEndedAt: Date!\n    $soldDate: Date!\n    $projectId: Int!\n    $docs: [DocInCreateProjectSellVoteArgs!]!\n  ) {\n    createProjectSellVoteByAdmin(\n      requestSellAmount: $requestSellAmount\n      sellVoteStartedAt: $sellVoteStartedAt\n      sellVoteEndedAt: $sellVoteEndedAt\n      soldDate: $soldDate\n      projectId: $projectId\n      docs: $docs\n    )\n  }\n": types.CreateProjectSellVoteByAdminDocument,
    "\n  mutation createProjectSellVoteFileByAdmin(\n    $projectSellVoteId: Int!\n    $file: Upload!\n    $name: String!\n  ) {\n    createProjectSellVoteFileByAdmin(\n      projectSellVoteId: $projectSellVoteId\n      name: $name\n      file: $file\n    )\n  }\n": types.CreateProjectSellVoteFileByAdminDocument,
    "\n  mutation deleteProjectFileByAdmin($id: Int!) {\n    deleteProjectFileByAdmin(id: $id)\n  }\n": types.DeleteProjectFileByAdminDocument,
    "\n  mutation deleteProjectSellVoteFileByAdmin($id: Int!) {\n    deleteProjectSellVoteFileByAdmin(id: $id)\n  }\n": types.DeleteProjectSellVoteFileByAdminDocument,
    "\n  mutation payDividendByAdmin($id: Int!) {\n    payDividendByAdmin(id: $id)\n  }\n": types.PayDividendByAdminDocument,
    "\n  mutation refreshFromAdmin {\n    refreshFromAdmin {\n      accessToken\n      refreshToken\n    }\n  }\n": types.RefreshFromAdminDocument,
    "\n  mutation refundFailedPublicOfferingByAdmin($projectId: Int!) {\n    refundFailedPublicOfferingByAdmin(projectId: $projectId)\n  }\n": types.RefundFailedPublicOfferingByAdminDocument,
    "\n  mutation refundPublicOfferingByAdmin($projectId: Int!) {\n    refundPublicOfferingByAdmin(projectId: $projectId)\n  }\n": types.RefundPublicOfferingByAdminDocument,
    "\n  mutation replyUserInquiryByAdmin($id: Int!, $reply: String!) {\n    replyUserInquiryByAdmin(id: $id, reply: $reply)\n  }\n": types.ReplyUserInquiryByAdminDocument,
    "\n  mutation signUpFromAdmin($email: String!, $password: String!, $name: String!) {\n    signUpFromAdmin(email: $email, password: $password, name: $name) {\n      email\n      name\n      otpSecret\n      createdAt\n      role\n    }\n  }\n": types.SignUpFromAdminDocument,
    "\n  mutation treatChangeInvestmentQualificationByAdmin(\n    $id: Int!\n    $approveStatus: ApproveStatus!\n    $reason: String\n  ) {\n    treatChangeInvestmentQualificationByAdmin(\n      id: $id\n      reason: $reason\n      approveStatus: $approveStatus\n    )\n  }\n": types.TreatChangeInvestmentQualificationByAdminDocument,
    "\n  mutation updateDividendPeriodByAdmin($id: Int!, $dividendPeriod: String!) {\n    updateDividendPeriodByAdmin(id: $id, dividendPeriod: $dividendPeriod)\n  }\n": types.UpdateDividendPeriodByAdminDocument,
    "\n  mutation updateFaqByAdmin($id: Int!, $question: String!, $answer: String!, $faqCategoryId: Int!) {\n    updateFaqByAdmin(id: $id, question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n": types.UpdateFaqByAdminDocument,
    "\n  mutation updateFeesByAdmin(\n    $feeRatio: String!\n    $incomeTaxRatio: String!\n    $localIncomeTaxRatio: String!\n  ) {\n    updateFeesByAdmin(\n      feeRatio: $feeRatio\n      incomeTaxRatio: $incomeTaxRatio\n      localIncomeTaxRatio: $localIncomeTaxRatio\n    )\n  }\n": types.UpdateFeesByAdminDocument,
    "\n  mutation updateHoursByAdmin(\n    $publicOfferingStartHour: String!\n    $publicOfferingEndHour: String!\n    $publicOfferingFinalHour: String!\n    $marketStartHour: String!\n    $marketEndHour: String!\n    $voteStartHour: String!\n    $voteEndHour: String!\n    $voteFinalHour: String!\n  ) {\n    updateHoursByAdmin(\n      publicOfferingStartHour: $publicOfferingStartHour\n      publicOfferingEndHour: $publicOfferingEndHour\n      publicOfferingFinalHour: $publicOfferingFinalHour\n      marketStartHour: $marketStartHour\n      marketEndHour: $marketEndHour\n      voteStartHour: $voteStartHour\n      voteEndHour: $voteEndHour\n      voteFinalHour: $voteFinalHour\n    )\n  }\n": types.UpdateHoursByAdminDocument,
    "\n  mutation updateNoticeByAdmin(\n    $id: Int!\n    $title: String!\n    $noticeKind: NoticeKind!\n    $content: String!\n  ) {\n    updateNoticeByAdmin(id: $id, title: $title, noticeKind: $noticeKind, content: $content)\n  }\n": types.UpdateNoticeByAdminDocument,
    "\n  mutation updatePolicyByAdmin(\n    $id: Int!\n    $title: String!\n    $content: String!\n    $isRequired: Boolean!\n    $policyCategoryIds: [Int!]!\n  ) {\n    updatePolicyByAdmin(\n      id: $id\n      title: $title\n      content: $content\n      isRequired: $isRequired\n      policyCategoryIds: $policyCategoryIds\n    )\n  }\n": types.UpdatePolicyByAdminDocument,
    "\n  mutation updateProjectBasicInfoByAdmin(\n    $id: Int!\n    $name: String!\n    $zip: String!\n    $address: String!\n    $addressDetail: String!\n    $latitude: String!\n    $longitude: String!\n    $zoning: String!\n    $mainPurpose: String!\n    $grossFloorAreaMeter: String!\n    $grossFloorAreaPyeong: String!\n    $buildingCoverageRatio: String!\n    $floorAreaRatio: String!\n    $officialLandPrice: String!\n    $completionDate: Date!\n    $lessee: String\n    $leaseStartedAt: Date\n    $leaseEndedAt: Date\n    $url: String\n  ) {\n    updateProjectBasicInfoByAdmin(\n      id: $id\n      name: $name\n      zip: $zip\n      address: $address\n      addressDetail: $addressDetail\n      latitude: $latitude\n      longitude: $longitude\n      zoning: $zoning\n      mainPurpose: $mainPurpose\n      grossFloorAreaMeter: $grossFloorAreaMeter\n      grossFloorAreaPyeong: $grossFloorAreaPyeong\n      buildingCoverageRatio: $buildingCoverageRatio\n      floorAreaRatio: $floorAreaRatio\n      officialLandPrice: $officialLandPrice\n      completionDate: $completionDate\n      lessee: $lessee\n      leaseStartedAt: $leaseStartedAt\n      leaseEndedAt: $leaseEndedAt\n      url: $url\n    )\n  }\n": types.UpdateProjectBasicInfoByAdminDocument,
    "\n  mutation updateProjectPublicOfferingInfoByAdmin(\n    $id: Int!\n    $totalPublicOfferingAmount: String!\n    $publicOfferingPrice: String!\n    $publicOfferingQuantity: Int!\n    $issuer: String!\n    $publicOfferingStartedAt: Date!\n    $publicOfferingEndedAt: Date!\n    $allocationDate: Date!\n    $receivingDate: Date!\n    $listedDate: Date!\n  ) {\n    updateProjectPublicOfferingInfoByAdmin(\n      id: $id\n      totalPublicOfferingAmount: $totalPublicOfferingAmount\n      publicOfferingPrice: $publicOfferingPrice\n      publicOfferingQuantity: $publicOfferingQuantity\n      issuer: $issuer\n      publicOfferingStartedAt: $publicOfferingStartedAt\n      publicOfferingEndedAt: $publicOfferingEndedAt\n      allocationDate: $allocationDate\n      receivingDate: $receivingDate\n      listedDate: $listedDate\n    )\n  }\n": types.UpdateProjectPublicOfferingInfoByAdminDocument,
    "\n  mutation updateProjectSellVoteByAdmin(\n    $id: Int!\n    $requestSellAmount: String!\n    $sellVoteStartedAt: Date!\n    $sellVoteEndedAt: Date!\n    $soldDate: Date!\n  ) {\n    updateProjectSellVoteByAdmin(\n      id: $id\n      requestSellAmount: $requestSellAmount\n      sellVoteStartedAt: $sellVoteStartedAt\n      sellVoteEndedAt: $sellVoteEndedAt\n      soldDate: $soldDate\n    )\n  }\n": types.UpdateProjectSellVoteByAdminDocument,
    "\n  mutation updateVoteKindByAdmin($projectId: Int!, $voteKind: VoteKind!) {\n    updateVoteKindByAdmin(projectId: $projectId, voteKind: $voteKind) {\n      id\n    }\n  }\n": types.UpdateVoteKindByAdminDocument,
    "\n  mutation uploadNoticeFileByAdmin($file: Upload!) {\n    uploadNoticeFileByAdmin(file: $file)\n  }\n": types.UploadNoticeFileByAdminDocument,
    "\n  mutation verifyMarketStatusIsUnlisted {\n    verifyMarketStatusIsUnlisted {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      totalDailyVolume\n      totalDailyTransactionAmount\n      dividendPeriod\n      createdAt\n    }\n  }\n": types.VerifyMarketStatusIsUnlistedDocument,
    "\n  mutation verifyVoteStatusIsSellVoteWait {\n    verifyVoteStatusIsSellVoteWait {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      totalDailyVolume\n      totalDailyTransactionAmount\n      dividendPeriod\n      createdAt\n    }\n  }\n": types.VerifyVoteStatusIsSellVoteWaitDocument,
    "\n  query findChangeInvestmentQualificationCountByAdmin {\n    findChangeInvestmentQualificationCountByAdmin\n  }\n": types.FindChangeInvestmentQualificationCountByAdminDocument,
    "\n  query findCompanyData {\n    findCompanyData {\n      publicOfferingStartHour\n      publicOfferingEndHour\n      publicOfferingFinalHour\n      marketStartHour\n      marketEndHour\n      voteStartHour\n      voteEndHour\n      voteFinalHour\n      feeRatio\n      incomeTaxRatio\n      localIncomeTaxRatio\n    }\n  }\n": types.FindCompanyDataDocument,
    "\n  query findManyAdminByAdmin($take: Int!, $skip: Int!) {\n    findManyAdminByAdmin(take: $take, skip: $skip) {\n      totalCount\n      admins {\n        name\n        email\n        otpSecret\n        createdAt\n      }\n    }\n  }\n": types.FindManyAdminByAdminDocument,
    "\n  query findManyChangeInvestmentQualificationByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $gte: Date!\n    $lt: Date!\n  ) {\n    findManyChangeInvestmentQualificationByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      gte: $gte\n      lt: $lt\n    ) {\n      totalCount\n      changeInvestmentQualifications {\n        id\n        approveStatus\n        reason\n        createdAt\n        treatedAt\n        originInvestmentQualification {\n          name\n          possibleInvestmentAmount\n        }\n        investmentQualification {\n          name\n          possibleInvestmentAmount\n        }\n        investmentType {\n          name\n        }\n        user {\n          name\n          phone\n        }\n        admin {\n          name\n        }\n        investmentDocuments {\n          fileName\n          investmentDocumentCategory {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.FindManyChangeInvestmentQualificationByAdminDocument,
    "\n  query findManyDividendByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $projectDividendId: Int!\n  ) {\n    findManyDividendByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      projectDividendId: $projectDividendId\n    ) {\n      totalCount\n      dividends {\n        id\n        tabsCount\n        tax\n        calcDividend\n        name\n        phone\n      }\n    }\n  }\n": types.FindManyDividendByAdminDocument,
    "\n  query findManyDividendInUserByAdmin($take: Int!, $skip: Int!, $email: String!, $projectId: Int!) {\n    findManyDividendInUserByAdmin(take: $take, skip: $skip, email: $email, projectId: $projectId) {\n      totalCount\n      project {\n        name\n      }\n      dividends {\n        id\n        tabsCount\n        tax\n        calcDividend\n        projectDividend {\n          name\n          dividendAt\n        }\n      }\n      sum\n    }\n  }\n": types.FindManyDividendInUserByAdminDocument,
    "\n  query findManyFaqByAdmin($take: Int!, $skip: Int!, $searchText: String!, $faqCategoryId: Int!) {\n    findManyFaqByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      faqCategoryId: $faqCategoryId\n    ) {\n      totalCount\n      faqs {\n        id\n        question\n        answer\n        createdAt\n        faqCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n      }\n    }\n  }\n": types.FindManyFaqByAdminDocument,
    "\n  query findManyFaqCategory {\n    findManyFaqCategory {\n      id\n      name\n    }\n  }\n": types.FindManyFaqCategoryDocument,
    "\n  query findManyNoticeByAdmin($take: Int!, $skip: Int!) {\n    findManyNoticeByAdmin(take: $take, skip: $skip) {\n      totalCount\n      notices {\n        id\n        noticeKind\n        title\n        content\n        createdAt\n        admin {\n          name\n        }\n      }\n    }\n  }\n": types.FindManyNoticeByAdminDocument,
    "\n  query findManyPolicyByAdmin($take: Int!, $skip: Int!) {\n    findManyPolicyByAdmin(take: $take, skip: $skip) {\n      totalCount\n      policies {\n        id\n        title\n        isRequired\n        admin {\n          name\n        }\n        policyCategories {\n          name\n        }\n      }\n    }\n  }\n": types.FindManyPolicyByAdminDocument,
    "\n  query findManyPolicyCategory {\n    findManyPolicyCategory {\n      id\n      name\n    }\n  }\n": types.FindManyPolicyCategoryDocument,
    "\n  query findManyProjectByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $isSold: Boolean!\n    $publicOfferingStatus: PublicOfferingStatus\n    $marketStatus: MarketStatus\n    $voteStatus: VoteStatus\n  ) {\n    findManyProjectByAdmin(\n      take: $take\n      skip: $skip\n      publicOfferingStatus: $publicOfferingStatus\n      marketStatus: $marketStatus\n      searchText: $searchText\n      voteStatus: $voteStatus\n      isSold: $isSold\n    ) {\n      projects {\n        id\n        name\n        publicOfferingStatus\n        marketStatus\n        voteStatus\n        totalPublicOfferingAmount\n        publicOfferingPrice\n        createdAt\n        isVisible\n        publicOfferingRatio\n        currentPrice\n        fluctuationRatio\n      }\n      totalCount\n    }\n  }\n": types.FindManyProjectByAdminDocument,
    "\n  query findManyProjectDividendByAdmin($take: Int!, $skip: Int!, $projectId: Int!) {\n    findManyProjectDividendByAdmin(take: $take, skip: $skip, projectId: $projectId) {\n      totalCount\n      dividendPeriod\n      projectDividends {\n        id\n        name\n        closingDate\n        operatingProfit\n        dividendPerTabs\n        dividendCount\n        dividendAt\n      }\n    }\n  }\n": types.FindManyProjectDividendByAdminDocument,
    "\n  query findManyProjectFile($take: Int, $skip: Int, $projectId: Int!, $fileKind: FileKind) {\n    findManyProjectFile(take: $take, skip: $skip, projectId: $projectId, fileKind: $fileKind) {\n      id\n      fileKind\n      name\n      fileName\n    }\n  }\n": types.FindManyProjectFileDocument,
    "\n  query findManyProjectSellVoteByAdmin($id: Int!) {\n    findManyProjectSellVoteByAdmin(id: $id) {\n      totalCount\n      projectSellVotes {\n        id\n        no\n        requestSellAmount\n        sellVoteStartedAt\n        sellVoteEndedAt\n        soldDate\n        voteKind\n        favourCount\n        againstCount\n        undoCount\n        docs {\n          id\n          fileKind\n          name\n          fileName\n        }\n        favourRatio\n        againstRatio\n        undoRatio\n      }\n    }\n  }\n": types.FindManyProjectSellVoteByAdminDocument,
    "\n  query findManyPublicOfferingByAdmin($take: Int!, $cursorId: Int, $projectId: Int!) {\n    findManyPublicOfferingByAdmin(take: $take, cursorId: $cursorId, projectId: $projectId) {\n      totalCount\n      publicOfferings {\n        id\n        quantity\n        isCanceled\n        createdAt\n        canceledAt\n        name\n        phone\n        status\n        amount\n        status\n      }\n    }\n  }\n": types.FindManyPublicOfferingByAdminDocument,
    "\n  query findManySellVoteByAdmin($take: Int!, $skip: Int!, $projectSellVoteId: Int!) {\n    findManySellVoteByAdmin(take: $take, skip: $skip, projectSellVoteId: $projectSellVoteId) {\n      totalCount\n      sellVotes {\n        id\n        voteKind\n        tabsCount\n        createdAt\n        user {\n          name\n          phone\n        }\n      }\n    }\n  }\n": types.FindManySellVoteByAdminDocument,
    "\n  query findManySignedOrderByAdmin($take: Int!, $skip: Int!, $projectId: Int!) {\n    findManySignedOrderByAdmin(take: $take, skip: $skip, projectId: $projectId) {\n      totalCount\n      signedOrders {\n        id\n        quantity\n        createdAt\n        askPrice\n        fluctuation\n        fluctuationRatio\n        buyer\n        seller\n      }\n    }\n  }\n": types.FindManySignedOrderByAdminDocument,
    "\n  query findManyTabsWalletByAdmin($take: Int!, $skip: Int!, $searchText: String!, $email: String!) {\n    findManyTabsWalletByAdmin(take: $take, skip: $skip, searchText: $searchText, email: $email) {\n      totalCount\n      tabsWallets {\n        tabsCount\n        averagePurchasePrice\n        project {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.FindManyTabsWalletByAdminDocument,
    "\n  query findManyUserByAdmin($take: Int!, $skip: Int!, $searchText: String!) {\n    findManyUserByAdmin(take: $take, skip: $skip, searchText: $searchText) {\n      totalCount\n      users {\n        email\n        name\n        phone\n        createdAt\n        possibleInvestmentAmount\n        isExistAccount\n        birth\n      }\n    }\n  }\n": types.FindManyUserByAdminDocument,
    "\n  query findManyUserInquiryByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $userInquiryCategoryId: Int\n    $email: String\n  ) {\n    findManyUserInquiryByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      userInquiryCategoryId: $userInquiryCategoryId\n      email: $email\n    ) {\n      totalCount\n      userInquiries {\n        id\n        title\n        content\n        reply\n        repliedAt\n        createdAt\n        userInquiryCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n        user {\n          name\n          phone\n        }\n      }\n    }\n  }\n": types.FindManyUserInquiryByAdminDocument,
    "\n  query findManyUserInquiryCategory {\n    findManyUserInquiryCategory {\n      id\n      name\n    }\n  }\n": types.FindManyUserInquiryCategoryDocument,
    "\n  query findManyWalletTransferByAdmin(\n    $take: Int!\n    $skip: Int!\n    $email: String!\n    $gte: Date!\n    $lt: Date!\n  ) {\n    findManyWalletTransferByAdmin(take: $take, skip: $skip, email: $email, gte: $gte, lt: $lt) {\n      totalCount\n      walletTransfers {\n        id\n        transferKind\n        calcAmount\n        createdAt\n        project {\n          name\n        }\n      }\n    }\n  }\n": types.FindManyWalletTransferByAdminDocument,
    "\n  query findPolicy($id: Int!) {\n    findPolicy(id: $id) {\n      id\n      title\n      content\n      isRequired\n      createdAt\n    }\n  }\n": types.FindPolicyDocument,
    "\n  query findProfileFromAdmin {\n    findProfileFromAdmin {\n      email\n      name\n      createdAt\n      role\n    }\n  }\n": types.FindProfileFromAdminDocument,
    "\n  query findProjectByAdmin($id: Int!) {\n    findProjectByAdmin(id: $id) {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      totalDailyVolume\n      totalDailyTransactionAmount\n      dividendPeriod\n      projectFiles {\n        id\n        fileKind\n        name\n        fileName\n      }\n      dDay\n    }\n  }\n": types.FindProjectByAdminDocument,
    "\n  query findProjectFile($id: Int!) {\n    findProjectFile(id: $id) {\n      id\n      fileKind\n      name\n      fileName\n    }\n  }\n": types.FindProjectFileDocument,
    "\n  query findPublicOfferingByAdmin($id: Int!) {\n    findPublicOfferingByAdmin(id: $id) {\n      quantity\n      cancelQuantity\n      createdAt\n      canceledAt\n      amount\n      cancelAmount\n      status\n      adminName\n      user {\n        name\n        phone\n      }\n    }\n  }\n": types.FindPublicOfferingByAdminDocument,
    "\n  query findPublicOfferingRefundInfoByAdmin($projectId: Int!) {\n    findPublicOfferingRefundInfoByAdmin(projectId: $projectId) {\n      refundQuantity\n      refundAmount\n      refundDate\n      adminName\n    }\n  }\n": types.FindPublicOfferingRefundInfoByAdminDocument,
    "\n  query findUserByAdmin($email: String!) {\n    findUserByAdmin(email: $email) {\n      email\n      name\n      birth\n      phone\n      createdAt\n      investmentQualification {\n        name\n      }\n      wallet {\n        balance\n        totalDeposit\n        publicOfferingDeposit\n        buyDeposit\n      }\n    }\n  }\n": types.FindUserByAdminDocument,
    "\n  query findUserInquiryCountByAdmin {\n    findUserInquiryCountByAdmin\n  }\n": types.FindUserInquiryCountByAdminDocument,
    "\n  query signInFromAdmin($email: String!, $password: String!, $code: String!) {\n    signInFromAdmin(email: $email, password: $password, code: $code) {\n      accessToken\n      refreshToken\n    }\n  }\n": types.SignInFromAdminDocument,
    "\n  query validateAdmin($email: String!, $password: String!) {\n    validateAdmin(email: $email, password: $password)\n  }\n": types.ValidateAdminDocument,
    "\n  subscription findChangeInvestmentQualificationCountByAdminSub {\n    findChangeInvestmentQualificationCountByAdminSub\n  }\n": types.FindChangeInvestmentQualificationCountByAdminSubDocument,
    "\n  subscription findUserInquiryCountByAdminSub {\n    findUserInquiryCountByAdminSub\n  }\n": types.FindUserInquiryCountByAdminSubDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createFaqByAdmin($question: String!, $answer: String!, $faqCategoryId: Int!) {\n    createFaqByAdmin(question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n"): (typeof documents)["\n  mutation createFaqByAdmin($question: String!, $answer: String!, $faqCategoryId: Int!) {\n    createFaqByAdmin(question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createNoticeByAdmin($title: String!, $noticeKind: NoticeKind!, $content: String!) {\n    createNoticeByAdmin(title: $title, noticeKind: $noticeKind, content: $content)\n  }\n"): (typeof documents)["\n  mutation createNoticeByAdmin($title: String!, $noticeKind: NoticeKind!, $content: String!) {\n    createNoticeByAdmin(title: $title, noticeKind: $noticeKind, content: $content)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation projectIsVisibleToggleByAdmin($id: Int!) {\n    projectIsVisibleToggleByAdmin(id: $id)\n  }\n"): (typeof documents)["\n  mutation projectIsVisibleToggleByAdmin($id: Int!) {\n    projectIsVisibleToggleByAdmin(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createPolicyByAdmin(\n    $title: String!\n    $content: String!\n    $isRequired: Boolean!\n    $policyCategoryIds: [Int!]!\n  ) {\n    createPolicyByAdmin(\n      title: $title\n      content: $content\n      isRequired: $isRequired\n      policyCategoryIds: $policyCategoryIds\n    )\n  }\n"): (typeof documents)["\n  mutation createPolicyByAdmin(\n    $title: String!\n    $content: String!\n    $isRequired: Boolean!\n    $policyCategoryIds: [Int!]!\n  ) {\n    createPolicyByAdmin(\n      title: $title\n      content: $content\n      isRequired: $isRequired\n      policyCategoryIds: $policyCategoryIds\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createProjectByAdmin(\n    $name: String!\n    $zip: String!\n    $address: String!\n    $addressDetail: String!\n    $latitude: String!\n    $longitude: String!\n    $zoning: String!\n    $mainPurpose: String!\n    $grossFloorAreaMeter: String!\n    $grossFloorAreaPyeong: String!\n    $buildingCoverageRatio: String!\n    $floorAreaRatio: String!\n    $officialLandPrice: String!\n    $completionDate: Date!\n    $lessee: String\n    $leaseStartedAt: Date\n    $leaseEndedAt: Date\n    $url: String\n    $tabsName: String!\n    $totalPublicOfferingAmount: String!\n    $publicOfferingPrice: String!\n    $publicOfferingQuantity: Int!\n    $issuer: String!\n    $publicOfferingStartedAt: Date!\n    $publicOfferingEndedAt: Date!\n    $allocationDate: Date!\n    $receivingDate: Date!\n    $listedDate: Date!\n    $images: [ImageInCreateProjectByAdminArgs!]!\n    $docs: [DocInCreateProjectByAdminArgs!]!\n    $officialInfos: [OfficialInfoInCreateProjectByAdminArgs!]!\n  ) {\n    createProjectByAdmin(\n      name: $name\n      zip: $zip\n      address: $address\n      addressDetail: $addressDetail\n      latitude: $latitude\n      longitude: $longitude\n      zoning: $zoning\n      mainPurpose: $mainPurpose\n      grossFloorAreaMeter: $grossFloorAreaMeter\n      grossFloorAreaPyeong: $grossFloorAreaPyeong\n      buildingCoverageRatio: $buildingCoverageRatio\n      floorAreaRatio: $floorAreaRatio\n      officialLandPrice: $officialLandPrice\n      completionDate: $completionDate\n      lessee: $lessee\n      leaseStartedAt: $leaseStartedAt\n      leaseEndedAt: $leaseEndedAt\n      url: $url\n      tabsName: $tabsName\n      totalPublicOfferingAmount: $totalPublicOfferingAmount\n      publicOfferingPrice: $publicOfferingPrice\n      publicOfferingQuantity: $publicOfferingQuantity\n      issuer: $issuer\n      publicOfferingStartedAt: $publicOfferingStartedAt\n      publicOfferingEndedAt: $publicOfferingEndedAt\n      allocationDate: $allocationDate\n      receivingDate: $receivingDate\n      listedDate: $listedDate\n      images: $images\n      docs: $docs\n      officialInfos: $officialInfos\n    ) {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation createProjectByAdmin(\n    $name: String!\n    $zip: String!\n    $address: String!\n    $addressDetail: String!\n    $latitude: String!\n    $longitude: String!\n    $zoning: String!\n    $mainPurpose: String!\n    $grossFloorAreaMeter: String!\n    $grossFloorAreaPyeong: String!\n    $buildingCoverageRatio: String!\n    $floorAreaRatio: String!\n    $officialLandPrice: String!\n    $completionDate: Date!\n    $lessee: String\n    $leaseStartedAt: Date\n    $leaseEndedAt: Date\n    $url: String\n    $tabsName: String!\n    $totalPublicOfferingAmount: String!\n    $publicOfferingPrice: String!\n    $publicOfferingQuantity: Int!\n    $issuer: String!\n    $publicOfferingStartedAt: Date!\n    $publicOfferingEndedAt: Date!\n    $allocationDate: Date!\n    $receivingDate: Date!\n    $listedDate: Date!\n    $images: [ImageInCreateProjectByAdminArgs!]!\n    $docs: [DocInCreateProjectByAdminArgs!]!\n    $officialInfos: [OfficialInfoInCreateProjectByAdminArgs!]!\n  ) {\n    createProjectByAdmin(\n      name: $name\n      zip: $zip\n      address: $address\n      addressDetail: $addressDetail\n      latitude: $latitude\n      longitude: $longitude\n      zoning: $zoning\n      mainPurpose: $mainPurpose\n      grossFloorAreaMeter: $grossFloorAreaMeter\n      grossFloorAreaPyeong: $grossFloorAreaPyeong\n      buildingCoverageRatio: $buildingCoverageRatio\n      floorAreaRatio: $floorAreaRatio\n      officialLandPrice: $officialLandPrice\n      completionDate: $completionDate\n      lessee: $lessee\n      leaseStartedAt: $leaseStartedAt\n      leaseEndedAt: $leaseEndedAt\n      url: $url\n      tabsName: $tabsName\n      totalPublicOfferingAmount: $totalPublicOfferingAmount\n      publicOfferingPrice: $publicOfferingPrice\n      publicOfferingQuantity: $publicOfferingQuantity\n      issuer: $issuer\n      publicOfferingStartedAt: $publicOfferingStartedAt\n      publicOfferingEndedAt: $publicOfferingEndedAt\n      allocationDate: $allocationDate\n      receivingDate: $receivingDate\n      listedDate: $listedDate\n      images: $images\n      docs: $docs\n      officialInfos: $officialInfos\n    ) {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createProjectDividendByAdmin(\n    $projectId: Int!\n    $name: String!\n    $closingDate: Date!\n    $operatingProfit: String\n  ) {\n    createProjectDividendByAdmin(\n      projectId: $projectId\n      name: $name\n      closingDate: $closingDate\n      operatingProfit: $operatingProfit\n    )\n  }\n"): (typeof documents)["\n  mutation createProjectDividendByAdmin(\n    $projectId: Int!\n    $name: String!\n    $closingDate: Date!\n    $operatingProfit: String\n  ) {\n    createProjectDividendByAdmin(\n      projectId: $projectId\n      name: $name\n      closingDate: $closingDate\n      operatingProfit: $operatingProfit\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createProjectFileByAdmin(\n    $projectId: Int!\n    $fileKind: FileKind!\n    $file: Upload!\n    $name: String\n  ) {\n    createProjectFileByAdmin(projectId: $projectId, name: $name, fileKind: $fileKind, file: $file)\n  }\n"): (typeof documents)["\n  mutation createProjectFileByAdmin(\n    $projectId: Int!\n    $fileKind: FileKind!\n    $file: Upload!\n    $name: String\n  ) {\n    createProjectFileByAdmin(projectId: $projectId, name: $name, fileKind: $fileKind, file: $file)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createProjectSellVoteByAdmin(\n    $requestSellAmount: String!\n    $sellVoteStartedAt: Date!\n    $sellVoteEndedAt: Date!\n    $soldDate: Date!\n    $projectId: Int!\n    $docs: [DocInCreateProjectSellVoteArgs!]!\n  ) {\n    createProjectSellVoteByAdmin(\n      requestSellAmount: $requestSellAmount\n      sellVoteStartedAt: $sellVoteStartedAt\n      sellVoteEndedAt: $sellVoteEndedAt\n      soldDate: $soldDate\n      projectId: $projectId\n      docs: $docs\n    )\n  }\n"): (typeof documents)["\n  mutation createProjectSellVoteByAdmin(\n    $requestSellAmount: String!\n    $sellVoteStartedAt: Date!\n    $sellVoteEndedAt: Date!\n    $soldDate: Date!\n    $projectId: Int!\n    $docs: [DocInCreateProjectSellVoteArgs!]!\n  ) {\n    createProjectSellVoteByAdmin(\n      requestSellAmount: $requestSellAmount\n      sellVoteStartedAt: $sellVoteStartedAt\n      sellVoteEndedAt: $sellVoteEndedAt\n      soldDate: $soldDate\n      projectId: $projectId\n      docs: $docs\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createProjectSellVoteFileByAdmin(\n    $projectSellVoteId: Int!\n    $file: Upload!\n    $name: String!\n  ) {\n    createProjectSellVoteFileByAdmin(\n      projectSellVoteId: $projectSellVoteId\n      name: $name\n      file: $file\n    )\n  }\n"): (typeof documents)["\n  mutation createProjectSellVoteFileByAdmin(\n    $projectSellVoteId: Int!\n    $file: Upload!\n    $name: String!\n  ) {\n    createProjectSellVoteFileByAdmin(\n      projectSellVoteId: $projectSellVoteId\n      name: $name\n      file: $file\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation deleteProjectFileByAdmin($id: Int!) {\n    deleteProjectFileByAdmin(id: $id)\n  }\n"): (typeof documents)["\n  mutation deleteProjectFileByAdmin($id: Int!) {\n    deleteProjectFileByAdmin(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation deleteProjectSellVoteFileByAdmin($id: Int!) {\n    deleteProjectSellVoteFileByAdmin(id: $id)\n  }\n"): (typeof documents)["\n  mutation deleteProjectSellVoteFileByAdmin($id: Int!) {\n    deleteProjectSellVoteFileByAdmin(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation payDividendByAdmin($id: Int!) {\n    payDividendByAdmin(id: $id)\n  }\n"): (typeof documents)["\n  mutation payDividendByAdmin($id: Int!) {\n    payDividendByAdmin(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation refreshFromAdmin {\n    refreshFromAdmin {\n      accessToken\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  mutation refreshFromAdmin {\n    refreshFromAdmin {\n      accessToken\n      refreshToken\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation refundFailedPublicOfferingByAdmin($projectId: Int!) {\n    refundFailedPublicOfferingByAdmin(projectId: $projectId)\n  }\n"): (typeof documents)["\n  mutation refundFailedPublicOfferingByAdmin($projectId: Int!) {\n    refundFailedPublicOfferingByAdmin(projectId: $projectId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation refundPublicOfferingByAdmin($projectId: Int!) {\n    refundPublicOfferingByAdmin(projectId: $projectId)\n  }\n"): (typeof documents)["\n  mutation refundPublicOfferingByAdmin($projectId: Int!) {\n    refundPublicOfferingByAdmin(projectId: $projectId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation replyUserInquiryByAdmin($id: Int!, $reply: String!) {\n    replyUserInquiryByAdmin(id: $id, reply: $reply)\n  }\n"): (typeof documents)["\n  mutation replyUserInquiryByAdmin($id: Int!, $reply: String!) {\n    replyUserInquiryByAdmin(id: $id, reply: $reply)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation signUpFromAdmin($email: String!, $password: String!, $name: String!) {\n    signUpFromAdmin(email: $email, password: $password, name: $name) {\n      email\n      name\n      otpSecret\n      createdAt\n      role\n    }\n  }\n"): (typeof documents)["\n  mutation signUpFromAdmin($email: String!, $password: String!, $name: String!) {\n    signUpFromAdmin(email: $email, password: $password, name: $name) {\n      email\n      name\n      otpSecret\n      createdAt\n      role\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation treatChangeInvestmentQualificationByAdmin(\n    $id: Int!\n    $approveStatus: ApproveStatus!\n    $reason: String\n  ) {\n    treatChangeInvestmentQualificationByAdmin(\n      id: $id\n      reason: $reason\n      approveStatus: $approveStatus\n    )\n  }\n"): (typeof documents)["\n  mutation treatChangeInvestmentQualificationByAdmin(\n    $id: Int!\n    $approveStatus: ApproveStatus!\n    $reason: String\n  ) {\n    treatChangeInvestmentQualificationByAdmin(\n      id: $id\n      reason: $reason\n      approveStatus: $approveStatus\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateDividendPeriodByAdmin($id: Int!, $dividendPeriod: String!) {\n    updateDividendPeriodByAdmin(id: $id, dividendPeriod: $dividendPeriod)\n  }\n"): (typeof documents)["\n  mutation updateDividendPeriodByAdmin($id: Int!, $dividendPeriod: String!) {\n    updateDividendPeriodByAdmin(id: $id, dividendPeriod: $dividendPeriod)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateFaqByAdmin($id: Int!, $question: String!, $answer: String!, $faqCategoryId: Int!) {\n    updateFaqByAdmin(id: $id, question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n"): (typeof documents)["\n  mutation updateFaqByAdmin($id: Int!, $question: String!, $answer: String!, $faqCategoryId: Int!) {\n    updateFaqByAdmin(id: $id, question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateFeesByAdmin(\n    $feeRatio: String!\n    $incomeTaxRatio: String!\n    $localIncomeTaxRatio: String!\n  ) {\n    updateFeesByAdmin(\n      feeRatio: $feeRatio\n      incomeTaxRatio: $incomeTaxRatio\n      localIncomeTaxRatio: $localIncomeTaxRatio\n    )\n  }\n"): (typeof documents)["\n  mutation updateFeesByAdmin(\n    $feeRatio: String!\n    $incomeTaxRatio: String!\n    $localIncomeTaxRatio: String!\n  ) {\n    updateFeesByAdmin(\n      feeRatio: $feeRatio\n      incomeTaxRatio: $incomeTaxRatio\n      localIncomeTaxRatio: $localIncomeTaxRatio\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateHoursByAdmin(\n    $publicOfferingStartHour: String!\n    $publicOfferingEndHour: String!\n    $publicOfferingFinalHour: String!\n    $marketStartHour: String!\n    $marketEndHour: String!\n    $voteStartHour: String!\n    $voteEndHour: String!\n    $voteFinalHour: String!\n  ) {\n    updateHoursByAdmin(\n      publicOfferingStartHour: $publicOfferingStartHour\n      publicOfferingEndHour: $publicOfferingEndHour\n      publicOfferingFinalHour: $publicOfferingFinalHour\n      marketStartHour: $marketStartHour\n      marketEndHour: $marketEndHour\n      voteStartHour: $voteStartHour\n      voteEndHour: $voteEndHour\n      voteFinalHour: $voteFinalHour\n    )\n  }\n"): (typeof documents)["\n  mutation updateHoursByAdmin(\n    $publicOfferingStartHour: String!\n    $publicOfferingEndHour: String!\n    $publicOfferingFinalHour: String!\n    $marketStartHour: String!\n    $marketEndHour: String!\n    $voteStartHour: String!\n    $voteEndHour: String!\n    $voteFinalHour: String!\n  ) {\n    updateHoursByAdmin(\n      publicOfferingStartHour: $publicOfferingStartHour\n      publicOfferingEndHour: $publicOfferingEndHour\n      publicOfferingFinalHour: $publicOfferingFinalHour\n      marketStartHour: $marketStartHour\n      marketEndHour: $marketEndHour\n      voteStartHour: $voteStartHour\n      voteEndHour: $voteEndHour\n      voteFinalHour: $voteFinalHour\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateNoticeByAdmin(\n    $id: Int!\n    $title: String!\n    $noticeKind: NoticeKind!\n    $content: String!\n  ) {\n    updateNoticeByAdmin(id: $id, title: $title, noticeKind: $noticeKind, content: $content)\n  }\n"): (typeof documents)["\n  mutation updateNoticeByAdmin(\n    $id: Int!\n    $title: String!\n    $noticeKind: NoticeKind!\n    $content: String!\n  ) {\n    updateNoticeByAdmin(id: $id, title: $title, noticeKind: $noticeKind, content: $content)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePolicyByAdmin(\n    $id: Int!\n    $title: String!\n    $content: String!\n    $isRequired: Boolean!\n    $policyCategoryIds: [Int!]!\n  ) {\n    updatePolicyByAdmin(\n      id: $id\n      title: $title\n      content: $content\n      isRequired: $isRequired\n      policyCategoryIds: $policyCategoryIds\n    )\n  }\n"): (typeof documents)["\n  mutation updatePolicyByAdmin(\n    $id: Int!\n    $title: String!\n    $content: String!\n    $isRequired: Boolean!\n    $policyCategoryIds: [Int!]!\n  ) {\n    updatePolicyByAdmin(\n      id: $id\n      title: $title\n      content: $content\n      isRequired: $isRequired\n      policyCategoryIds: $policyCategoryIds\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateProjectBasicInfoByAdmin(\n    $id: Int!\n    $name: String!\n    $zip: String!\n    $address: String!\n    $addressDetail: String!\n    $latitude: String!\n    $longitude: String!\n    $zoning: String!\n    $mainPurpose: String!\n    $grossFloorAreaMeter: String!\n    $grossFloorAreaPyeong: String!\n    $buildingCoverageRatio: String!\n    $floorAreaRatio: String!\n    $officialLandPrice: String!\n    $completionDate: Date!\n    $lessee: String\n    $leaseStartedAt: Date\n    $leaseEndedAt: Date\n    $url: String\n  ) {\n    updateProjectBasicInfoByAdmin(\n      id: $id\n      name: $name\n      zip: $zip\n      address: $address\n      addressDetail: $addressDetail\n      latitude: $latitude\n      longitude: $longitude\n      zoning: $zoning\n      mainPurpose: $mainPurpose\n      grossFloorAreaMeter: $grossFloorAreaMeter\n      grossFloorAreaPyeong: $grossFloorAreaPyeong\n      buildingCoverageRatio: $buildingCoverageRatio\n      floorAreaRatio: $floorAreaRatio\n      officialLandPrice: $officialLandPrice\n      completionDate: $completionDate\n      lessee: $lessee\n      leaseStartedAt: $leaseStartedAt\n      leaseEndedAt: $leaseEndedAt\n      url: $url\n    )\n  }\n"): (typeof documents)["\n  mutation updateProjectBasicInfoByAdmin(\n    $id: Int!\n    $name: String!\n    $zip: String!\n    $address: String!\n    $addressDetail: String!\n    $latitude: String!\n    $longitude: String!\n    $zoning: String!\n    $mainPurpose: String!\n    $grossFloorAreaMeter: String!\n    $grossFloorAreaPyeong: String!\n    $buildingCoverageRatio: String!\n    $floorAreaRatio: String!\n    $officialLandPrice: String!\n    $completionDate: Date!\n    $lessee: String\n    $leaseStartedAt: Date\n    $leaseEndedAt: Date\n    $url: String\n  ) {\n    updateProjectBasicInfoByAdmin(\n      id: $id\n      name: $name\n      zip: $zip\n      address: $address\n      addressDetail: $addressDetail\n      latitude: $latitude\n      longitude: $longitude\n      zoning: $zoning\n      mainPurpose: $mainPurpose\n      grossFloorAreaMeter: $grossFloorAreaMeter\n      grossFloorAreaPyeong: $grossFloorAreaPyeong\n      buildingCoverageRatio: $buildingCoverageRatio\n      floorAreaRatio: $floorAreaRatio\n      officialLandPrice: $officialLandPrice\n      completionDate: $completionDate\n      lessee: $lessee\n      leaseStartedAt: $leaseStartedAt\n      leaseEndedAt: $leaseEndedAt\n      url: $url\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateProjectPublicOfferingInfoByAdmin(\n    $id: Int!\n    $totalPublicOfferingAmount: String!\n    $publicOfferingPrice: String!\n    $publicOfferingQuantity: Int!\n    $issuer: String!\n    $publicOfferingStartedAt: Date!\n    $publicOfferingEndedAt: Date!\n    $allocationDate: Date!\n    $receivingDate: Date!\n    $listedDate: Date!\n  ) {\n    updateProjectPublicOfferingInfoByAdmin(\n      id: $id\n      totalPublicOfferingAmount: $totalPublicOfferingAmount\n      publicOfferingPrice: $publicOfferingPrice\n      publicOfferingQuantity: $publicOfferingQuantity\n      issuer: $issuer\n      publicOfferingStartedAt: $publicOfferingStartedAt\n      publicOfferingEndedAt: $publicOfferingEndedAt\n      allocationDate: $allocationDate\n      receivingDate: $receivingDate\n      listedDate: $listedDate\n    )\n  }\n"): (typeof documents)["\n  mutation updateProjectPublicOfferingInfoByAdmin(\n    $id: Int!\n    $totalPublicOfferingAmount: String!\n    $publicOfferingPrice: String!\n    $publicOfferingQuantity: Int!\n    $issuer: String!\n    $publicOfferingStartedAt: Date!\n    $publicOfferingEndedAt: Date!\n    $allocationDate: Date!\n    $receivingDate: Date!\n    $listedDate: Date!\n  ) {\n    updateProjectPublicOfferingInfoByAdmin(\n      id: $id\n      totalPublicOfferingAmount: $totalPublicOfferingAmount\n      publicOfferingPrice: $publicOfferingPrice\n      publicOfferingQuantity: $publicOfferingQuantity\n      issuer: $issuer\n      publicOfferingStartedAt: $publicOfferingStartedAt\n      publicOfferingEndedAt: $publicOfferingEndedAt\n      allocationDate: $allocationDate\n      receivingDate: $receivingDate\n      listedDate: $listedDate\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateProjectSellVoteByAdmin(\n    $id: Int!\n    $requestSellAmount: String!\n    $sellVoteStartedAt: Date!\n    $sellVoteEndedAt: Date!\n    $soldDate: Date!\n  ) {\n    updateProjectSellVoteByAdmin(\n      id: $id\n      requestSellAmount: $requestSellAmount\n      sellVoteStartedAt: $sellVoteStartedAt\n      sellVoteEndedAt: $sellVoteEndedAt\n      soldDate: $soldDate\n    )\n  }\n"): (typeof documents)["\n  mutation updateProjectSellVoteByAdmin(\n    $id: Int!\n    $requestSellAmount: String!\n    $sellVoteStartedAt: Date!\n    $sellVoteEndedAt: Date!\n    $soldDate: Date!\n  ) {\n    updateProjectSellVoteByAdmin(\n      id: $id\n      requestSellAmount: $requestSellAmount\n      sellVoteStartedAt: $sellVoteStartedAt\n      sellVoteEndedAt: $sellVoteEndedAt\n      soldDate: $soldDate\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateVoteKindByAdmin($projectId: Int!, $voteKind: VoteKind!) {\n    updateVoteKindByAdmin(projectId: $projectId, voteKind: $voteKind) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation updateVoteKindByAdmin($projectId: Int!, $voteKind: VoteKind!) {\n    updateVoteKindByAdmin(projectId: $projectId, voteKind: $voteKind) {\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation uploadNoticeFileByAdmin($file: Upload!) {\n    uploadNoticeFileByAdmin(file: $file)\n  }\n"): (typeof documents)["\n  mutation uploadNoticeFileByAdmin($file: Upload!) {\n    uploadNoticeFileByAdmin(file: $file)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation verifyMarketStatusIsUnlisted {\n    verifyMarketStatusIsUnlisted {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      totalDailyVolume\n      totalDailyTransactionAmount\n      dividendPeriod\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation verifyMarketStatusIsUnlisted {\n    verifyMarketStatusIsUnlisted {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      totalDailyVolume\n      totalDailyTransactionAmount\n      dividendPeriod\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation verifyVoteStatusIsSellVoteWait {\n    verifyVoteStatusIsSellVoteWait {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      totalDailyVolume\n      totalDailyTransactionAmount\n      dividendPeriod\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation verifyVoteStatusIsSellVoteWait {\n    verifyVoteStatusIsSellVoteWait {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      totalDailyVolume\n      totalDailyTransactionAmount\n      dividendPeriod\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findChangeInvestmentQualificationCountByAdmin {\n    findChangeInvestmentQualificationCountByAdmin\n  }\n"): (typeof documents)["\n  query findChangeInvestmentQualificationCountByAdmin {\n    findChangeInvestmentQualificationCountByAdmin\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findCompanyData {\n    findCompanyData {\n      publicOfferingStartHour\n      publicOfferingEndHour\n      publicOfferingFinalHour\n      marketStartHour\n      marketEndHour\n      voteStartHour\n      voteEndHour\n      voteFinalHour\n      feeRatio\n      incomeTaxRatio\n      localIncomeTaxRatio\n    }\n  }\n"): (typeof documents)["\n  query findCompanyData {\n    findCompanyData {\n      publicOfferingStartHour\n      publicOfferingEndHour\n      publicOfferingFinalHour\n      marketStartHour\n      marketEndHour\n      voteStartHour\n      voteEndHour\n      voteFinalHour\n      feeRatio\n      incomeTaxRatio\n      localIncomeTaxRatio\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyAdminByAdmin($take: Int!, $skip: Int!) {\n    findManyAdminByAdmin(take: $take, skip: $skip) {\n      totalCount\n      admins {\n        name\n        email\n        otpSecret\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyAdminByAdmin($take: Int!, $skip: Int!) {\n    findManyAdminByAdmin(take: $take, skip: $skip) {\n      totalCount\n      admins {\n        name\n        email\n        otpSecret\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyChangeInvestmentQualificationByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $gte: Date!\n    $lt: Date!\n  ) {\n    findManyChangeInvestmentQualificationByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      gte: $gte\n      lt: $lt\n    ) {\n      totalCount\n      changeInvestmentQualifications {\n        id\n        approveStatus\n        reason\n        createdAt\n        treatedAt\n        originInvestmentQualification {\n          name\n          possibleInvestmentAmount\n        }\n        investmentQualification {\n          name\n          possibleInvestmentAmount\n        }\n        investmentType {\n          name\n        }\n        user {\n          name\n          phone\n        }\n        admin {\n          name\n        }\n        investmentDocuments {\n          fileName\n          investmentDocumentCategory {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyChangeInvestmentQualificationByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $gte: Date!\n    $lt: Date!\n  ) {\n    findManyChangeInvestmentQualificationByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      gte: $gte\n      lt: $lt\n    ) {\n      totalCount\n      changeInvestmentQualifications {\n        id\n        approveStatus\n        reason\n        createdAt\n        treatedAt\n        originInvestmentQualification {\n          name\n          possibleInvestmentAmount\n        }\n        investmentQualification {\n          name\n          possibleInvestmentAmount\n        }\n        investmentType {\n          name\n        }\n        user {\n          name\n          phone\n        }\n        admin {\n          name\n        }\n        investmentDocuments {\n          fileName\n          investmentDocumentCategory {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyDividendByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $projectDividendId: Int!\n  ) {\n    findManyDividendByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      projectDividendId: $projectDividendId\n    ) {\n      totalCount\n      dividends {\n        id\n        tabsCount\n        tax\n        calcDividend\n        name\n        phone\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyDividendByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $projectDividendId: Int!\n  ) {\n    findManyDividendByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      projectDividendId: $projectDividendId\n    ) {\n      totalCount\n      dividends {\n        id\n        tabsCount\n        tax\n        calcDividend\n        name\n        phone\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyDividendInUserByAdmin($take: Int!, $skip: Int!, $email: String!, $projectId: Int!) {\n    findManyDividendInUserByAdmin(take: $take, skip: $skip, email: $email, projectId: $projectId) {\n      totalCount\n      project {\n        name\n      }\n      dividends {\n        id\n        tabsCount\n        tax\n        calcDividend\n        projectDividend {\n          name\n          dividendAt\n        }\n      }\n      sum\n    }\n  }\n"): (typeof documents)["\n  query findManyDividendInUserByAdmin($take: Int!, $skip: Int!, $email: String!, $projectId: Int!) {\n    findManyDividendInUserByAdmin(take: $take, skip: $skip, email: $email, projectId: $projectId) {\n      totalCount\n      project {\n        name\n      }\n      dividends {\n        id\n        tabsCount\n        tax\n        calcDividend\n        projectDividend {\n          name\n          dividendAt\n        }\n      }\n      sum\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyFaqByAdmin($take: Int!, $skip: Int!, $searchText: String!, $faqCategoryId: Int!) {\n    findManyFaqByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      faqCategoryId: $faqCategoryId\n    ) {\n      totalCount\n      faqs {\n        id\n        question\n        answer\n        createdAt\n        faqCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyFaqByAdmin($take: Int!, $skip: Int!, $searchText: String!, $faqCategoryId: Int!) {\n    findManyFaqByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      faqCategoryId: $faqCategoryId\n    ) {\n      totalCount\n      faqs {\n        id\n        question\n        answer\n        createdAt\n        faqCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyFaqCategory {\n    findManyFaqCategory {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query findManyFaqCategory {\n    findManyFaqCategory {\n      id\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyNoticeByAdmin($take: Int!, $skip: Int!) {\n    findManyNoticeByAdmin(take: $take, skip: $skip) {\n      totalCount\n      notices {\n        id\n        noticeKind\n        title\n        content\n        createdAt\n        admin {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyNoticeByAdmin($take: Int!, $skip: Int!) {\n    findManyNoticeByAdmin(take: $take, skip: $skip) {\n      totalCount\n      notices {\n        id\n        noticeKind\n        title\n        content\n        createdAt\n        admin {\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyPolicyByAdmin($take: Int!, $skip: Int!) {\n    findManyPolicyByAdmin(take: $take, skip: $skip) {\n      totalCount\n      policies {\n        id\n        title\n        isRequired\n        admin {\n          name\n        }\n        policyCategories {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyPolicyByAdmin($take: Int!, $skip: Int!) {\n    findManyPolicyByAdmin(take: $take, skip: $skip) {\n      totalCount\n      policies {\n        id\n        title\n        isRequired\n        admin {\n          name\n        }\n        policyCategories {\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyPolicyCategory {\n    findManyPolicyCategory {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query findManyPolicyCategory {\n    findManyPolicyCategory {\n      id\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyProjectByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $isSold: Boolean!\n    $publicOfferingStatus: PublicOfferingStatus\n    $marketStatus: MarketStatus\n    $voteStatus: VoteStatus\n  ) {\n    findManyProjectByAdmin(\n      take: $take\n      skip: $skip\n      publicOfferingStatus: $publicOfferingStatus\n      marketStatus: $marketStatus\n      searchText: $searchText\n      voteStatus: $voteStatus\n      isSold: $isSold\n    ) {\n      projects {\n        id\n        name\n        publicOfferingStatus\n        marketStatus\n        voteStatus\n        totalPublicOfferingAmount\n        publicOfferingPrice\n        createdAt\n        isVisible\n        publicOfferingRatio\n        currentPrice\n        fluctuationRatio\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query findManyProjectByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $isSold: Boolean!\n    $publicOfferingStatus: PublicOfferingStatus\n    $marketStatus: MarketStatus\n    $voteStatus: VoteStatus\n  ) {\n    findManyProjectByAdmin(\n      take: $take\n      skip: $skip\n      publicOfferingStatus: $publicOfferingStatus\n      marketStatus: $marketStatus\n      searchText: $searchText\n      voteStatus: $voteStatus\n      isSold: $isSold\n    ) {\n      projects {\n        id\n        name\n        publicOfferingStatus\n        marketStatus\n        voteStatus\n        totalPublicOfferingAmount\n        publicOfferingPrice\n        createdAt\n        isVisible\n        publicOfferingRatio\n        currentPrice\n        fluctuationRatio\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyProjectDividendByAdmin($take: Int!, $skip: Int!, $projectId: Int!) {\n    findManyProjectDividendByAdmin(take: $take, skip: $skip, projectId: $projectId) {\n      totalCount\n      dividendPeriod\n      projectDividends {\n        id\n        name\n        closingDate\n        operatingProfit\n        dividendPerTabs\n        dividendCount\n        dividendAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyProjectDividendByAdmin($take: Int!, $skip: Int!, $projectId: Int!) {\n    findManyProjectDividendByAdmin(take: $take, skip: $skip, projectId: $projectId) {\n      totalCount\n      dividendPeriod\n      projectDividends {\n        id\n        name\n        closingDate\n        operatingProfit\n        dividendPerTabs\n        dividendCount\n        dividendAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyProjectFile($take: Int, $skip: Int, $projectId: Int!, $fileKind: FileKind) {\n    findManyProjectFile(take: $take, skip: $skip, projectId: $projectId, fileKind: $fileKind) {\n      id\n      fileKind\n      name\n      fileName\n    }\n  }\n"): (typeof documents)["\n  query findManyProjectFile($take: Int, $skip: Int, $projectId: Int!, $fileKind: FileKind) {\n    findManyProjectFile(take: $take, skip: $skip, projectId: $projectId, fileKind: $fileKind) {\n      id\n      fileKind\n      name\n      fileName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyProjectSellVoteByAdmin($id: Int!) {\n    findManyProjectSellVoteByAdmin(id: $id) {\n      totalCount\n      projectSellVotes {\n        id\n        no\n        requestSellAmount\n        sellVoteStartedAt\n        sellVoteEndedAt\n        soldDate\n        voteKind\n        favourCount\n        againstCount\n        undoCount\n        docs {\n          id\n          fileKind\n          name\n          fileName\n        }\n        favourRatio\n        againstRatio\n        undoRatio\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyProjectSellVoteByAdmin($id: Int!) {\n    findManyProjectSellVoteByAdmin(id: $id) {\n      totalCount\n      projectSellVotes {\n        id\n        no\n        requestSellAmount\n        sellVoteStartedAt\n        sellVoteEndedAt\n        soldDate\n        voteKind\n        favourCount\n        againstCount\n        undoCount\n        docs {\n          id\n          fileKind\n          name\n          fileName\n        }\n        favourRatio\n        againstRatio\n        undoRatio\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyPublicOfferingByAdmin($take: Int!, $cursorId: Int, $projectId: Int!) {\n    findManyPublicOfferingByAdmin(take: $take, cursorId: $cursorId, projectId: $projectId) {\n      totalCount\n      publicOfferings {\n        id\n        quantity\n        isCanceled\n        createdAt\n        canceledAt\n        name\n        phone\n        status\n        amount\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyPublicOfferingByAdmin($take: Int!, $cursorId: Int, $projectId: Int!) {\n    findManyPublicOfferingByAdmin(take: $take, cursorId: $cursorId, projectId: $projectId) {\n      totalCount\n      publicOfferings {\n        id\n        quantity\n        isCanceled\n        createdAt\n        canceledAt\n        name\n        phone\n        status\n        amount\n        status\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManySellVoteByAdmin($take: Int!, $skip: Int!, $projectSellVoteId: Int!) {\n    findManySellVoteByAdmin(take: $take, skip: $skip, projectSellVoteId: $projectSellVoteId) {\n      totalCount\n      sellVotes {\n        id\n        voteKind\n        tabsCount\n        createdAt\n        user {\n          name\n          phone\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManySellVoteByAdmin($take: Int!, $skip: Int!, $projectSellVoteId: Int!) {\n    findManySellVoteByAdmin(take: $take, skip: $skip, projectSellVoteId: $projectSellVoteId) {\n      totalCount\n      sellVotes {\n        id\n        voteKind\n        tabsCount\n        createdAt\n        user {\n          name\n          phone\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManySignedOrderByAdmin($take: Int!, $skip: Int!, $projectId: Int!) {\n    findManySignedOrderByAdmin(take: $take, skip: $skip, projectId: $projectId) {\n      totalCount\n      signedOrders {\n        id\n        quantity\n        createdAt\n        askPrice\n        fluctuation\n        fluctuationRatio\n        buyer\n        seller\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManySignedOrderByAdmin($take: Int!, $skip: Int!, $projectId: Int!) {\n    findManySignedOrderByAdmin(take: $take, skip: $skip, projectId: $projectId) {\n      totalCount\n      signedOrders {\n        id\n        quantity\n        createdAt\n        askPrice\n        fluctuation\n        fluctuationRatio\n        buyer\n        seller\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyTabsWalletByAdmin($take: Int!, $skip: Int!, $searchText: String!, $email: String!) {\n    findManyTabsWalletByAdmin(take: $take, skip: $skip, searchText: $searchText, email: $email) {\n      totalCount\n      tabsWallets {\n        tabsCount\n        averagePurchasePrice\n        project {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyTabsWalletByAdmin($take: Int!, $skip: Int!, $searchText: String!, $email: String!) {\n    findManyTabsWalletByAdmin(take: $take, skip: $skip, searchText: $searchText, email: $email) {\n      totalCount\n      tabsWallets {\n        tabsCount\n        averagePurchasePrice\n        project {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyUserByAdmin($take: Int!, $skip: Int!, $searchText: String!) {\n    findManyUserByAdmin(take: $take, skip: $skip, searchText: $searchText) {\n      totalCount\n      users {\n        email\n        name\n        phone\n        createdAt\n        possibleInvestmentAmount\n        isExistAccount\n        birth\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyUserByAdmin($take: Int!, $skip: Int!, $searchText: String!) {\n    findManyUserByAdmin(take: $take, skip: $skip, searchText: $searchText) {\n      totalCount\n      users {\n        email\n        name\n        phone\n        createdAt\n        possibleInvestmentAmount\n        isExistAccount\n        birth\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyUserInquiryByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $userInquiryCategoryId: Int\n    $email: String\n  ) {\n    findManyUserInquiryByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      userInquiryCategoryId: $userInquiryCategoryId\n      email: $email\n    ) {\n      totalCount\n      userInquiries {\n        id\n        title\n        content\n        reply\n        repliedAt\n        createdAt\n        userInquiryCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n        user {\n          name\n          phone\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyUserInquiryByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $userInquiryCategoryId: Int\n    $email: String\n  ) {\n    findManyUserInquiryByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      userInquiryCategoryId: $userInquiryCategoryId\n      email: $email\n    ) {\n      totalCount\n      userInquiries {\n        id\n        title\n        content\n        reply\n        repliedAt\n        createdAt\n        userInquiryCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n        user {\n          name\n          phone\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyUserInquiryCategory {\n    findManyUserInquiryCategory {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query findManyUserInquiryCategory {\n    findManyUserInquiryCategory {\n      id\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyWalletTransferByAdmin(\n    $take: Int!\n    $skip: Int!\n    $email: String!\n    $gte: Date!\n    $lt: Date!\n  ) {\n    findManyWalletTransferByAdmin(take: $take, skip: $skip, email: $email, gte: $gte, lt: $lt) {\n      totalCount\n      walletTransfers {\n        id\n        transferKind\n        calcAmount\n        createdAt\n        project {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyWalletTransferByAdmin(\n    $take: Int!\n    $skip: Int!\n    $email: String!\n    $gte: Date!\n    $lt: Date!\n  ) {\n    findManyWalletTransferByAdmin(take: $take, skip: $skip, email: $email, gte: $gte, lt: $lt) {\n      totalCount\n      walletTransfers {\n        id\n        transferKind\n        calcAmount\n        createdAt\n        project {\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findPolicy($id: Int!) {\n    findPolicy(id: $id) {\n      id\n      title\n      content\n      isRequired\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query findPolicy($id: Int!) {\n    findPolicy(id: $id) {\n      id\n      title\n      content\n      isRequired\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findProfileFromAdmin {\n    findProfileFromAdmin {\n      email\n      name\n      createdAt\n      role\n    }\n  }\n"): (typeof documents)["\n  query findProfileFromAdmin {\n    findProfileFromAdmin {\n      email\n      name\n      createdAt\n      role\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findProjectByAdmin($id: Int!) {\n    findProjectByAdmin(id: $id) {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      totalDailyVolume\n      totalDailyTransactionAmount\n      dividendPeriod\n      projectFiles {\n        id\n        fileKind\n        name\n        fileName\n      }\n      dDay\n    }\n  }\n"): (typeof documents)["\n  query findProjectByAdmin($id: Int!) {\n    findProjectByAdmin(id: $id) {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      totalDailyVolume\n      totalDailyTransactionAmount\n      dividendPeriod\n      projectFiles {\n        id\n        fileKind\n        name\n        fileName\n      }\n      dDay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findProjectFile($id: Int!) {\n    findProjectFile(id: $id) {\n      id\n      fileKind\n      name\n      fileName\n    }\n  }\n"): (typeof documents)["\n  query findProjectFile($id: Int!) {\n    findProjectFile(id: $id) {\n      id\n      fileKind\n      name\n      fileName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findPublicOfferingByAdmin($id: Int!) {\n    findPublicOfferingByAdmin(id: $id) {\n      quantity\n      cancelQuantity\n      createdAt\n      canceledAt\n      amount\n      cancelAmount\n      status\n      adminName\n      user {\n        name\n        phone\n      }\n    }\n  }\n"): (typeof documents)["\n  query findPublicOfferingByAdmin($id: Int!) {\n    findPublicOfferingByAdmin(id: $id) {\n      quantity\n      cancelQuantity\n      createdAt\n      canceledAt\n      amount\n      cancelAmount\n      status\n      adminName\n      user {\n        name\n        phone\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findPublicOfferingRefundInfoByAdmin($projectId: Int!) {\n    findPublicOfferingRefundInfoByAdmin(projectId: $projectId) {\n      refundQuantity\n      refundAmount\n      refundDate\n      adminName\n    }\n  }\n"): (typeof documents)["\n  query findPublicOfferingRefundInfoByAdmin($projectId: Int!) {\n    findPublicOfferingRefundInfoByAdmin(projectId: $projectId) {\n      refundQuantity\n      refundAmount\n      refundDate\n      adminName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findUserByAdmin($email: String!) {\n    findUserByAdmin(email: $email) {\n      email\n      name\n      birth\n      phone\n      createdAt\n      investmentQualification {\n        name\n      }\n      wallet {\n        balance\n        totalDeposit\n        publicOfferingDeposit\n        buyDeposit\n      }\n    }\n  }\n"): (typeof documents)["\n  query findUserByAdmin($email: String!) {\n    findUserByAdmin(email: $email) {\n      email\n      name\n      birth\n      phone\n      createdAt\n      investmentQualification {\n        name\n      }\n      wallet {\n        balance\n        totalDeposit\n        publicOfferingDeposit\n        buyDeposit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findUserInquiryCountByAdmin {\n    findUserInquiryCountByAdmin\n  }\n"): (typeof documents)["\n  query findUserInquiryCountByAdmin {\n    findUserInquiryCountByAdmin\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query signInFromAdmin($email: String!, $password: String!, $code: String!) {\n    signInFromAdmin(email: $email, password: $password, code: $code) {\n      accessToken\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  query signInFromAdmin($email: String!, $password: String!, $code: String!) {\n    signInFromAdmin(email: $email, password: $password, code: $code) {\n      accessToken\n      refreshToken\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query validateAdmin($email: String!, $password: String!) {\n    validateAdmin(email: $email, password: $password)\n  }\n"): (typeof documents)["\n  query validateAdmin($email: String!, $password: String!) {\n    validateAdmin(email: $email, password: $password)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription findChangeInvestmentQualificationCountByAdminSub {\n    findChangeInvestmentQualificationCountByAdminSub\n  }\n"): (typeof documents)["\n  subscription findChangeInvestmentQualificationCountByAdminSub {\n    findChangeInvestmentQualificationCountByAdminSub\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription findUserInquiryCountByAdminSub {\n    findUserInquiryCountByAdminSub\n  }\n"): (typeof documents)["\n  subscription findUserInquiryCountByAdminSub {\n    findUserInquiryCountByAdminSub\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;