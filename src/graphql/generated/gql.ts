/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  mutation createFaqByAdmin($question: String!, $answer: String!, $faqCategoryId: Int!) {\n    createFaqByAdmin(question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n": types.CreateFaqByAdminDocument,
    "\n  mutation createNoticeByAdmin($title: String!, $noticeKind: NoticeKind!, $content: String!) {\n    createNoticeByAdmin(title: $title, noticeKind: $noticeKind, content: $content)\n  }\n": types.CreateNoticeByAdminDocument,
    "\n  mutation createProjectByAdmin(\n    $name: String!\n    $zip: String!\n    $address: String!\n    $addressDetail: String!\n    $latitude: String!\n    $longitude: String!\n    $zoning: String!\n    $mainPurpose: String!\n    $grossFloorAreaMeter: String!\n    $grossFloorAreaPyeong: String!\n    $buildingCoverageRatio: String!\n    $floorAreaRatio: String!\n    $officialLandPrice: String!\n    $completionDate: Date!\n    $lessee: String\n    $leaseStartedAt: Date\n    $leaseEndedAt: Date\n    $url: String\n    $tabsName: String!\n    $totalPublicOfferingAmount: String!\n    $publicOfferingPrice: String!\n    $publicOfferingQuantity: Int!\n    $issuer: String!\n    $publicOfferingStartedAt: Date!\n    $publicOfferingEndedAt: Date!\n    $allocationDate: Date!\n    $receivingDate: Date!\n    $listedDate: Date!\n    $images: [ImageInCreateProjectByAdminArgs!]!\n    $docs: [DocInCreateProjectByAdminArgs!]!\n    $officialInfos: [OfficialInfoInCreateProjectByAdminArgs!]!\n  ) {\n    createProjectByAdmin(\n      name: $name\n      zip: $zip\n      address: $address\n      addressDetail: $addressDetail\n      latitude: $latitude\n      longitude: $longitude\n      zoning: $zoning\n      mainPurpose: $mainPurpose\n      grossFloorAreaMeter: $grossFloorAreaMeter\n      grossFloorAreaPyeong: $grossFloorAreaPyeong\n      buildingCoverageRatio: $buildingCoverageRatio\n      floorAreaRatio: $floorAreaRatio\n      officialLandPrice: $officialLandPrice\n      completionDate: $completionDate\n      lessee: $lessee\n      leaseStartedAt: $leaseStartedAt\n      leaseEndedAt: $leaseEndedAt\n      url: $url\n      tabsName: $tabsName\n      totalPublicOfferingAmount: $totalPublicOfferingAmount\n      publicOfferingPrice: $publicOfferingPrice\n      publicOfferingQuantity: $publicOfferingQuantity\n      issuer: $issuer\n      publicOfferingStartedAt: $publicOfferingStartedAt\n      publicOfferingEndedAt: $publicOfferingEndedAt\n      allocationDate: $allocationDate\n      receivingDate: $receivingDate\n      listedDate: $listedDate\n      images: $images\n      docs: $docs\n      officialInfos: $officialInfos\n    ) {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      createdAt\n    }\n  }\n": types.CreateProjectByAdminDocument,
    "\n  mutation createProjectSellVoteByAdmin(\n    $requestSellAmount: String!\n    $sellVoteStartedAt: Date!\n    $sellVoteEndedAt: Date!\n    $soldDate: Date!\n    $projectId: Int!\n    $docs: [Upload!]!\n  ) {\n    createProjectSellVoteByAdmin(\n      requestSellAmount: $requestSellAmount\n      sellVoteStartedAt: $sellVoteStartedAt\n      sellVoteEndedAt: $sellVoteEndedAt\n      soldDate: $soldDate\n      projectId: $projectId\n      docs: $docs\n    )\n  }\n": types.CreateProjectSellVoteByAdminDocument,
    "\n  mutation refreshFromAdmin {\n    refreshFromAdmin {\n      accessToken\n      refreshToken\n    }\n  }\n": types.RefreshFromAdminDocument,
    "\n  mutation replyUserInquiryByAdmin($id: Int!, $reply: String!) {\n    replyUserInquiryByAdmin(id: $id, reply: $reply)\n  }\n": types.ReplyUserInquiryByAdminDocument,
    "\n  mutation signUpFromAdmin(\n    $email: String!\n    $password: String!\n    $name: String!\n  ) {\n    signUpFromAdmin(email: $email, password: $password, name: $name) {\n      email\n      name\n      createdAt\n      role\n    }\n  }\n": types.SignUpFromAdminDocument,
    "\n  mutation treatChangeInvestmentQualificationByAdmin(\n    $id: Int!\n    $approveStatus: ApproveStatus!\n    $reason: String\n  ) {\n    treatChangeInvestmentQualificationByAdmin(\n      id: $id\n      approveStatus: $approveStatus\n      reason: $reason\n    )\n  }\n": types.TreatChangeInvestmentQualificationByAdminDocument,
    "\n  mutation updateFaqByAdmin($id: Int!, $question: String!, $answer: String!, $faqCategoryId: Int!) {\n    updateFaqByAdmin(id: $id, question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n": types.UpdateFaqByAdminDocument,
    "\n  mutation updateNoticeByAdmin(\n    $id: Int!\n    $title: String!\n    $noticeKind: NoticeKind!\n    $content: String!\n  ) {\n    updateNoticeByAdmin(id: $id, title: $title, noticeKind: $noticeKind, content: $content)\n  }\n": types.UpdateNoticeByAdminDocument,
    "\n  mutation updateVoteKindByAdmin($projectId: Int!, $voteKind: VoteKind!) {\n    updateVoteKindByAdmin(projectId: $projectId, voteKind: $voteKind) {\n      id\n    }\n  }\n": types.UpdateVoteKindByAdminDocument,
    "\n  mutation uploadNoticeFileByAdmin($file: Upload!) {\n    uploadNoticeFileByAdmin(file: $file)\n  }\n": types.UploadNoticeFileByAdminDocument,
    "\n    query findManyChangeInvestmentQualificationByAdmin(\n      $take: Int!\n      $skip: Int!\n      $searchText: String!\n      $gte: Date!\n      $lt: Date!\n    ) {\n      findManyChangeInvestmentQualificationByAdmin(\n        take: $take\n        skip: $skip\n        searchText: $searchText\n        gte: $gte\n        lt: $lt\n      ) {\n        totalCount\n        changeInvestmentQualifications {\n          id\n          approveStatus\n          reason\n          createdAt\n          treatedAt\n          originInvestmentQualification {\n            name\n            possibleInvestmentAmount\n          }\n          investmentQualification {\n            name\n            possibleInvestmentAmount\n          }\n          investmentType {\n            name\n          }\n          user {\n            name\n            phone\n          }\n          admin {\n            name\n          }\n          investmentDocuments {\n            fileName\n            investmentDocumentCategory {\n              name\n            }\n          }\n        }\n      }\n    }\n  ": types.FindManyChangeInvestmentQualificationByAdminDocument,
    "\n  query findManyFaqByAdmin($take: Int!, $skip: Int!, $searchText: String!, $faqCategoryId: Int!) {\n    findManyFaqByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      faqCategoryId: $faqCategoryId\n    ) {\n      totalCount\n      faqs {\n        id\n        question\n        answer\n        createdAt\n        faqCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n      }\n    }\n  }\n": types.FindManyFaqByAdminDocument,
    "\n  query findManyNoticeByAdmin($take: Int!, $skip: Int!) {\n    findManyNoticeByAdmin(take: $take, skip: $skip) {\n      totalCount\n      notices {\n        id\n        noticeKind\n        title\n        content\n        createdAt\n        admin {\n          name\n        }\n      }\n    }\n  }\n": types.FindManyNoticeByAdminDocument,
    "\n  query findManyProject(\n    $take: Int!\n    $skip: Int!\n    $publicOfferingStatus: PublicOfferingStatus\n    $marketStatus: MarketStatus\n  ) {\n    findManyProject(\n      take: $take\n      skip: $skip\n      publicOfferingStatus: $publicOfferingStatus\n      marketStatus: $marketStatus\n    ) {\n      projects {\n        id\n        name\n        publicOfferingStatus\n        marketStatus\n        voteStatus\n        totalPublicOfferingAmount\n        publicOfferingPrice\n        publicOfferingQuantity\n        publicOfferingStartedAt\n        publicOfferingEndedAt\n        projectFiles {\n          id\n          fileKind\n          name\n          fileName\n        }\n        dailyTransactionInfos {\n          standardPrice\n          totalTransactionAmount\n          totalVolume\n          fluctuation\n          fluctuationRatio\n        }\n        currentPrice\n        fluctuation\n        fluctuationRatio\n        dDay\n        url\n      }\n      totalCount\n    }\n  }\n": types.FindManyProjectDocument,
    "\n  query findManyUserByAdmin($take: Int!, $skip: Int!) {\n    findManyUserByAdmin(take: $take, skip: $skip) {\n      totalCount\n      users {\n        email\n        name\n        phone\n        createdAt\n        possibleInvestmentAmount\n        isExistAccount\n        birth\n      }\n    }\n  }\n": types.FindManyUserByAdminDocument,
    "\n  query findManyUserInquiryByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $userInquiryCategoryId: Int!\n  ) {\n    findManyUserInquiryByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      userInquiryCategoryId: $userInquiryCategoryId\n    ) {\n      totalCount\n      userInquiries {\n        id\n        title\n        content\n        reply\n        repliedAt\n        createdAt\n        userInquiryCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n        user {\n          name\n          phone\n        }\n      }\n    }\n  }\n": types.FindManyUserInquiryByAdminDocument,
    "\n  query findProfileFromAdmin {\n    findProfileFromAdmin {\n      email\n      name\n      createdAt\n      role\n    }\n  }\n": types.FindProfileFromAdminDocument,
    "\n  query signInFromAdmin($email: String!, $password: String!, $code: String!) {\n    signInFromAdmin(email: $email, password: $password, code: $code) {\n      accessToken\n      refreshToken\n    }\n  }\n": types.SignInFromAdminDocument,
    "\n  query validateAdmin($email: String!, $password: String!) {\n    validateAdmin(email: $email, password: $password)\n  }\n": types.ValidateAdminDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createFaqByAdmin($question: String!, $answer: String!, $faqCategoryId: Int!) {\n    createFaqByAdmin(question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n"): (typeof documents)["\n  mutation createFaqByAdmin($question: String!, $answer: String!, $faqCategoryId: Int!) {\n    createFaqByAdmin(question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createNoticeByAdmin($title: String!, $noticeKind: NoticeKind!, $content: String!) {\n    createNoticeByAdmin(title: $title, noticeKind: $noticeKind, content: $content)\n  }\n"): (typeof documents)["\n  mutation createNoticeByAdmin($title: String!, $noticeKind: NoticeKind!, $content: String!) {\n    createNoticeByAdmin(title: $title, noticeKind: $noticeKind, content: $content)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createProjectByAdmin(\n    $name: String!\n    $zip: String!\n    $address: String!\n    $addressDetail: String!\n    $latitude: String!\n    $longitude: String!\n    $zoning: String!\n    $mainPurpose: String!\n    $grossFloorAreaMeter: String!\n    $grossFloorAreaPyeong: String!\n    $buildingCoverageRatio: String!\n    $floorAreaRatio: String!\n    $officialLandPrice: String!\n    $completionDate: Date!\n    $lessee: String\n    $leaseStartedAt: Date\n    $leaseEndedAt: Date\n    $url: String\n    $tabsName: String!\n    $totalPublicOfferingAmount: String!\n    $publicOfferingPrice: String!\n    $publicOfferingQuantity: Int!\n    $issuer: String!\n    $publicOfferingStartedAt: Date!\n    $publicOfferingEndedAt: Date!\n    $allocationDate: Date!\n    $receivingDate: Date!\n    $listedDate: Date!\n    $images: [ImageInCreateProjectByAdminArgs!]!\n    $docs: [DocInCreateProjectByAdminArgs!]!\n    $officialInfos: [OfficialInfoInCreateProjectByAdminArgs!]!\n  ) {\n    createProjectByAdmin(\n      name: $name\n      zip: $zip\n      address: $address\n      addressDetail: $addressDetail\n      latitude: $latitude\n      longitude: $longitude\n      zoning: $zoning\n      mainPurpose: $mainPurpose\n      grossFloorAreaMeter: $grossFloorAreaMeter\n      grossFloorAreaPyeong: $grossFloorAreaPyeong\n      buildingCoverageRatio: $buildingCoverageRatio\n      floorAreaRatio: $floorAreaRatio\n      officialLandPrice: $officialLandPrice\n      completionDate: $completionDate\n      lessee: $lessee\n      leaseStartedAt: $leaseStartedAt\n      leaseEndedAt: $leaseEndedAt\n      url: $url\n      tabsName: $tabsName\n      totalPublicOfferingAmount: $totalPublicOfferingAmount\n      publicOfferingPrice: $publicOfferingPrice\n      publicOfferingQuantity: $publicOfferingQuantity\n      issuer: $issuer\n      publicOfferingStartedAt: $publicOfferingStartedAt\n      publicOfferingEndedAt: $publicOfferingEndedAt\n      allocationDate: $allocationDate\n      receivingDate: $receivingDate\n      listedDate: $listedDate\n      images: $images\n      docs: $docs\n      officialInfos: $officialInfos\n    ) {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation createProjectByAdmin(\n    $name: String!\n    $zip: String!\n    $address: String!\n    $addressDetail: String!\n    $latitude: String!\n    $longitude: String!\n    $zoning: String!\n    $mainPurpose: String!\n    $grossFloorAreaMeter: String!\n    $grossFloorAreaPyeong: String!\n    $buildingCoverageRatio: String!\n    $floorAreaRatio: String!\n    $officialLandPrice: String!\n    $completionDate: Date!\n    $lessee: String\n    $leaseStartedAt: Date\n    $leaseEndedAt: Date\n    $url: String\n    $tabsName: String!\n    $totalPublicOfferingAmount: String!\n    $publicOfferingPrice: String!\n    $publicOfferingQuantity: Int!\n    $issuer: String!\n    $publicOfferingStartedAt: Date!\n    $publicOfferingEndedAt: Date!\n    $allocationDate: Date!\n    $receivingDate: Date!\n    $listedDate: Date!\n    $images: [ImageInCreateProjectByAdminArgs!]!\n    $docs: [DocInCreateProjectByAdminArgs!]!\n    $officialInfos: [OfficialInfoInCreateProjectByAdminArgs!]!\n  ) {\n    createProjectByAdmin(\n      name: $name\n      zip: $zip\n      address: $address\n      addressDetail: $addressDetail\n      latitude: $latitude\n      longitude: $longitude\n      zoning: $zoning\n      mainPurpose: $mainPurpose\n      grossFloorAreaMeter: $grossFloorAreaMeter\n      grossFloorAreaPyeong: $grossFloorAreaPyeong\n      buildingCoverageRatio: $buildingCoverageRatio\n      floorAreaRatio: $floorAreaRatio\n      officialLandPrice: $officialLandPrice\n      completionDate: $completionDate\n      lessee: $lessee\n      leaseStartedAt: $leaseStartedAt\n      leaseEndedAt: $leaseEndedAt\n      url: $url\n      tabsName: $tabsName\n      totalPublicOfferingAmount: $totalPublicOfferingAmount\n      publicOfferingPrice: $publicOfferingPrice\n      publicOfferingQuantity: $publicOfferingQuantity\n      issuer: $issuer\n      publicOfferingStartedAt: $publicOfferingStartedAt\n      publicOfferingEndedAt: $publicOfferingEndedAt\n      allocationDate: $allocationDate\n      receivingDate: $receivingDate\n      listedDate: $listedDate\n      images: $images\n      docs: $docs\n      officialInfos: $officialInfos\n    ) {\n      id\n      name\n      publicOfferingStatus\n      marketStatus\n      voteStatus\n      isSold\n      zip\n      address\n      addressDetail\n      latitude\n      longitude\n      zoning\n      mainPurpose\n      grossFloorAreaMeter\n      grossFloorAreaPyeong\n      buildingCoverageRatio\n      floorAreaRatio\n      officialLandPrice\n      completionDate\n      lessee\n      leaseStartedAt\n      leaseEndedAt\n      url\n      tabsName\n      totalPublicOfferingAmount\n      publicOfferingPrice\n      publicOfferingQuantity\n      issuer\n      publicOfferingStartedAt\n      publicOfferingEndedAt\n      allocationDate\n      receivingDate\n      listedDate\n      currentPublicOfferingAmount\n      currentPublicOfferingQuantity\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createProjectSellVoteByAdmin(\n    $requestSellAmount: String!\n    $sellVoteStartedAt: Date!\n    $sellVoteEndedAt: Date!\n    $soldDate: Date!\n    $projectId: Int!\n    $docs: [Upload!]!\n  ) {\n    createProjectSellVoteByAdmin(\n      requestSellAmount: $requestSellAmount\n      sellVoteStartedAt: $sellVoteStartedAt\n      sellVoteEndedAt: $sellVoteEndedAt\n      soldDate: $soldDate\n      projectId: $projectId\n      docs: $docs\n    )\n  }\n"): (typeof documents)["\n  mutation createProjectSellVoteByAdmin(\n    $requestSellAmount: String!\n    $sellVoteStartedAt: Date!\n    $sellVoteEndedAt: Date!\n    $soldDate: Date!\n    $projectId: Int!\n    $docs: [Upload!]!\n  ) {\n    createProjectSellVoteByAdmin(\n      requestSellAmount: $requestSellAmount\n      sellVoteStartedAt: $sellVoteStartedAt\n      sellVoteEndedAt: $sellVoteEndedAt\n      soldDate: $soldDate\n      projectId: $projectId\n      docs: $docs\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation refreshFromAdmin {\n    refreshFromAdmin {\n      accessToken\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  mutation refreshFromAdmin {\n    refreshFromAdmin {\n      accessToken\n      refreshToken\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation replyUserInquiryByAdmin($id: Int!, $reply: String!) {\n    replyUserInquiryByAdmin(id: $id, reply: $reply)\n  }\n"): (typeof documents)["\n  mutation replyUserInquiryByAdmin($id: Int!, $reply: String!) {\n    replyUserInquiryByAdmin(id: $id, reply: $reply)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation signUpFromAdmin(\n    $email: String!\n    $password: String!\n    $name: String!\n  ) {\n    signUpFromAdmin(email: $email, password: $password, name: $name) {\n      email\n      name\n      createdAt\n      role\n    }\n  }\n"): (typeof documents)["\n  mutation signUpFromAdmin(\n    $email: String!\n    $password: String!\n    $name: String!\n  ) {\n    signUpFromAdmin(email: $email, password: $password, name: $name) {\n      email\n      name\n      createdAt\n      role\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation treatChangeInvestmentQualificationByAdmin(\n    $id: Int!\n    $approveStatus: ApproveStatus!\n    $reason: String\n  ) {\n    treatChangeInvestmentQualificationByAdmin(\n      id: $id\n      approveStatus: $approveStatus\n      reason: $reason\n    )\n  }\n"): (typeof documents)["\n  mutation treatChangeInvestmentQualificationByAdmin(\n    $id: Int!\n    $approveStatus: ApproveStatus!\n    $reason: String\n  ) {\n    treatChangeInvestmentQualificationByAdmin(\n      id: $id\n      approveStatus: $approveStatus\n      reason: $reason\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateFaqByAdmin($id: Int!, $question: String!, $answer: String!, $faqCategoryId: Int!) {\n    updateFaqByAdmin(id: $id, question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n"): (typeof documents)["\n  mutation updateFaqByAdmin($id: Int!, $question: String!, $answer: String!, $faqCategoryId: Int!) {\n    updateFaqByAdmin(id: $id, question: $question, answer: $answer, faqCategoryId: $faqCategoryId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateNoticeByAdmin(\n    $id: Int!\n    $title: String!\n    $noticeKind: NoticeKind!\n    $content: String!\n  ) {\n    updateNoticeByAdmin(id: $id, title: $title, noticeKind: $noticeKind, content: $content)\n  }\n"): (typeof documents)["\n  mutation updateNoticeByAdmin(\n    $id: Int!\n    $title: String!\n    $noticeKind: NoticeKind!\n    $content: String!\n  ) {\n    updateNoticeByAdmin(id: $id, title: $title, noticeKind: $noticeKind, content: $content)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateVoteKindByAdmin($projectId: Int!, $voteKind: VoteKind!) {\n    updateVoteKindByAdmin(projectId: $projectId, voteKind: $voteKind) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation updateVoteKindByAdmin($projectId: Int!, $voteKind: VoteKind!) {\n    updateVoteKindByAdmin(projectId: $projectId, voteKind: $voteKind) {\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation uploadNoticeFileByAdmin($file: Upload!) {\n    uploadNoticeFileByAdmin(file: $file)\n  }\n"): (typeof documents)["\n  mutation uploadNoticeFileByAdmin($file: Upload!) {\n    uploadNoticeFileByAdmin(file: $file)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query findManyChangeInvestmentQualificationByAdmin(\n      $take: Int!\n      $skip: Int!\n      $searchText: String!\n      $gte: Date!\n      $lt: Date!\n    ) {\n      findManyChangeInvestmentQualificationByAdmin(\n        take: $take\n        skip: $skip\n        searchText: $searchText\n        gte: $gte\n        lt: $lt\n      ) {\n        totalCount\n        changeInvestmentQualifications {\n          id\n          approveStatus\n          reason\n          createdAt\n          treatedAt\n          originInvestmentQualification {\n            name\n            possibleInvestmentAmount\n          }\n          investmentQualification {\n            name\n            possibleInvestmentAmount\n          }\n          investmentType {\n            name\n          }\n          user {\n            name\n            phone\n          }\n          admin {\n            name\n          }\n          investmentDocuments {\n            fileName\n            investmentDocumentCategory {\n              name\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query findManyChangeInvestmentQualificationByAdmin(\n      $take: Int!\n      $skip: Int!\n      $searchText: String!\n      $gte: Date!\n      $lt: Date!\n    ) {\n      findManyChangeInvestmentQualificationByAdmin(\n        take: $take\n        skip: $skip\n        searchText: $searchText\n        gte: $gte\n        lt: $lt\n      ) {\n        totalCount\n        changeInvestmentQualifications {\n          id\n          approveStatus\n          reason\n          createdAt\n          treatedAt\n          originInvestmentQualification {\n            name\n            possibleInvestmentAmount\n          }\n          investmentQualification {\n            name\n            possibleInvestmentAmount\n          }\n          investmentType {\n            name\n          }\n          user {\n            name\n            phone\n          }\n          admin {\n            name\n          }\n          investmentDocuments {\n            fileName\n            investmentDocumentCategory {\n              name\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyFaqByAdmin($take: Int!, $skip: Int!, $searchText: String!, $faqCategoryId: Int!) {\n    findManyFaqByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      faqCategoryId: $faqCategoryId\n    ) {\n      totalCount\n      faqs {\n        id\n        question\n        answer\n        createdAt\n        faqCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyFaqByAdmin($take: Int!, $skip: Int!, $searchText: String!, $faqCategoryId: Int!) {\n    findManyFaqByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      faqCategoryId: $faqCategoryId\n    ) {\n      totalCount\n      faqs {\n        id\n        question\n        answer\n        createdAt\n        faqCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyNoticeByAdmin($take: Int!, $skip: Int!) {\n    findManyNoticeByAdmin(take: $take, skip: $skip) {\n      totalCount\n      notices {\n        id\n        noticeKind\n        title\n        content\n        createdAt\n        admin {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyNoticeByAdmin($take: Int!, $skip: Int!) {\n    findManyNoticeByAdmin(take: $take, skip: $skip) {\n      totalCount\n      notices {\n        id\n        noticeKind\n        title\n        content\n        createdAt\n        admin {\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyProject(\n    $take: Int!\n    $skip: Int!\n    $publicOfferingStatus: PublicOfferingStatus\n    $marketStatus: MarketStatus\n  ) {\n    findManyProject(\n      take: $take\n      skip: $skip\n      publicOfferingStatus: $publicOfferingStatus\n      marketStatus: $marketStatus\n    ) {\n      projects {\n        id\n        name\n        publicOfferingStatus\n        marketStatus\n        voteStatus\n        totalPublicOfferingAmount\n        publicOfferingPrice\n        publicOfferingQuantity\n        publicOfferingStartedAt\n        publicOfferingEndedAt\n        projectFiles {\n          id\n          fileKind\n          name\n          fileName\n        }\n        dailyTransactionInfos {\n          standardPrice\n          totalTransactionAmount\n          totalVolume\n          fluctuation\n          fluctuationRatio\n        }\n        currentPrice\n        fluctuation\n        fluctuationRatio\n        dDay\n        url\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query findManyProject(\n    $take: Int!\n    $skip: Int!\n    $publicOfferingStatus: PublicOfferingStatus\n    $marketStatus: MarketStatus\n  ) {\n    findManyProject(\n      take: $take\n      skip: $skip\n      publicOfferingStatus: $publicOfferingStatus\n      marketStatus: $marketStatus\n    ) {\n      projects {\n        id\n        name\n        publicOfferingStatus\n        marketStatus\n        voteStatus\n        totalPublicOfferingAmount\n        publicOfferingPrice\n        publicOfferingQuantity\n        publicOfferingStartedAt\n        publicOfferingEndedAt\n        projectFiles {\n          id\n          fileKind\n          name\n          fileName\n        }\n        dailyTransactionInfos {\n          standardPrice\n          totalTransactionAmount\n          totalVolume\n          fluctuation\n          fluctuationRatio\n        }\n        currentPrice\n        fluctuation\n        fluctuationRatio\n        dDay\n        url\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyUserByAdmin($take: Int!, $skip: Int!) {\n    findManyUserByAdmin(take: $take, skip: $skip) {\n      totalCount\n      users {\n        email\n        name\n        phone\n        createdAt\n        possibleInvestmentAmount\n        isExistAccount\n        birth\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyUserByAdmin($take: Int!, $skip: Int!) {\n    findManyUserByAdmin(take: $take, skip: $skip) {\n      totalCount\n      users {\n        email\n        name\n        phone\n        createdAt\n        possibleInvestmentAmount\n        isExistAccount\n        birth\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findManyUserInquiryByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $userInquiryCategoryId: Int!\n  ) {\n    findManyUserInquiryByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      userInquiryCategoryId: $userInquiryCategoryId\n    ) {\n      totalCount\n      userInquiries {\n        id\n        title\n        content\n        reply\n        repliedAt\n        createdAt\n        userInquiryCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n        user {\n          name\n          phone\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query findManyUserInquiryByAdmin(\n    $take: Int!\n    $skip: Int!\n    $searchText: String!\n    $userInquiryCategoryId: Int!\n  ) {\n    findManyUserInquiryByAdmin(\n      take: $take\n      skip: $skip\n      searchText: $searchText\n      userInquiryCategoryId: $userInquiryCategoryId\n    ) {\n      totalCount\n      userInquiries {\n        id\n        title\n        content\n        reply\n        repliedAt\n        createdAt\n        userInquiryCategory {\n          id\n          name\n        }\n        admin {\n          name\n        }\n        user {\n          name\n          phone\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query findProfileFromAdmin {\n    findProfileFromAdmin {\n      email\n      name\n      createdAt\n      role\n    }\n  }\n"): (typeof documents)["\n  query findProfileFromAdmin {\n    findProfileFromAdmin {\n      email\n      name\n      createdAt\n      role\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query signInFromAdmin($email: String!, $password: String!, $code: String!) {\n    signInFromAdmin(email: $email, password: $password, code: $code) {\n      accessToken\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  query signInFromAdmin($email: String!, $password: String!, $code: String!) {\n    signInFromAdmin(email: $email, password: $password, code: $code) {\n      accessToken\n      refreshToken\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query validateAdmin($email: String!, $password: String!) {\n    validateAdmin(email: $email, password: $password)\n  }\n"): (typeof documents)["\n  query validateAdmin($email: String!, $password: String!) {\n    validateAdmin(email: $email, password: $password)\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;